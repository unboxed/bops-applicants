---
name: deploy-environment

on:
  workflow_call:
    inputs:
      environment-name:
        type: string
        required: true
      db_subnets:
        type: string
        required: true
      db_sg:
        type: string
        required: true

concurrency:
  group: ${{ inputs.environment-name }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout

jobs:
  build-image:
    name: Create and push docker image to ECR for ${{ inputs.environment-name }}
    runs-on: ubuntu-24.04
    environment: ${{ inputs.environment-name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/bops-applicants_github_deploy_${{ inputs.environment-name }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Expose GitHub Runtime for Docker build
        uses: crazy-max/ghaction-github-runtime@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push ${{ inputs.environment-name }} image to Amazon ECR based github sha
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops-applicants/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
          REVISION: ${{ steps.github.outputs.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          DOCKER_BUILDKIT=1 docker buildx build \
            --cache-to type=gha,mode=max \
            --cache-from type=gha \
            --push \
            --build-arg REVISION=$REVISION \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -f Dockerfile.production .

  deploy-services:
    name: Deploy services to ${{ inputs.environment-name }}
    runs-on: ubuntu-24.04
    needs: [build-image]
    strategy:
      matrix:
        service_type: ['console', 'web']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        if: matrix.service_type == 'web'

      - name: Get github commit sha
        id: github
        run: |
          echo "sha=$(echo ${GITHUB_SHA::7})" >>$GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/bops-applicants_github_deploy_${{ inputs.environment-name }}
          aws-region: eu-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Get image URI
        id: ecr-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: bops-applicants/${{ inputs.environment-name }}
          IMAGE_TAG: ${{ steps.github.outputs.sha }}
        run: |
          echo "uri=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >>$GITHUB_OUTPUT

      - name: Download task definition for ${{ matrix.service_type }} and strip unused properties
        run: |
          aws ecs describe-task-definition --task-definition bops-applicants-${{ matrix.service_type }}-${{ inputs.environment-name }} --query taskDefinition | \
          jq -r 'del(.compatibilities, .taskDefinitionArn, .requiresAttributes, .revision, .status, .registeredAt, .registeredBy)' > ${{ matrix.service_type }}.json

      - name: Generate task definition for ${{ inputs.environment-name }}
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ matrix.service_type }}.json
          container-name: bops-applicants
          image: ${{ steps.ecr-image.outputs.uri }}

      - name: Deploy ${{ matrix.service_type }}
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        if: matrix.service_type != 'web'
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: bops-applicants-${{ matrix.service_type }}-${{ inputs.environment-name }}
          cluster: bops-${{ inputs.environment-name }}
          wait-for-service-stability: true

      - name: Deploy web
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        if: matrix.service_type == 'web'
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: bops-applicants-${{ matrix.service_type }}-${{ inputs.environment-name }}
          cluster: bops-${{ inputs.environment-name }}
          wait-for-service-stability: true
          codedeploy-appspec: .aws/appspec.yml
          codedeploy-application: bops-applicants-${{ inputs.environment-name }}
          codedeploy-deployment-group: default

  tag-release:
    name: Tag release
    runs-on: ubuntu-24.04
    needs: [build-image]
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get current date
        id: date
        run: |
          echo "date=$(date +%Y-%m-%dT%H.%M)" >>$GITHUB_OUTPUT

      - name: Bump version and push tag
        id: tag_version
        uses: mathieudutour/github-tag-action@v6.2
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          custom_tag: ${{ inputs.environment-name }}-${{ steps.date.outputs.date }}
          tag_prefix: ""

      - name: Create a GitHub release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag_version.outputs.new_tag }}
          name: Release ${{ steps.tag_version.outputs.new_tag }}
          body: ${{ steps.tag_version.outputs.changelog }}

        if: inputs.environment-name == 'production'
